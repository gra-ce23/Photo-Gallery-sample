*{
    box-sizing: border-box;
}
body{
    font-family: sans-serif;
    background-color: #f5f6f7;
    margin: 0;
}
.header{
    text-transform: uppercase;
    padding: 32px;
    background-color: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;
    text-align: center;
}
.gallery img{
    width: 100%;
    max-width: 350px;
    height: 300px;
    object-fit: cover;
    border-radius: 10px;
}
.gallery::after{
    width: 350px;
    content: "";
}
/* Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container. */
.gallery{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    padding: 20px 10px;
    max-width: 1400px;
    margin: 0 auto;
    gap: 16px;
}

/* Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:

. row (default): horizontal axis with flex items from left to right
. row-reverse: horizontal axis with flex items from right to left
. column: vertical axis with flex items from top to bottom
. column-reverse: vertical axis with flex items from bottom to top
       Note: The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.
*/
/* The flex-wrap property determines how your flex items behave when the flex container is too small. Setting it to wrap will allow the items to wrap to the next row or column. nowrap (default) will prevent your items from wrapping and shrink them if needed.
Make it so your flex items wrap to the next row when they run out of space. */
/* The align-items property positions the flex content along the cross axis. In this case, with your flex-direction set to row, your cross axis would be vertical. */






